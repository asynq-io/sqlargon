{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to SQLArgon documentation","text":"<p>Wrapper around SQLAlchemy async session, core and native features for Postgres/SQLite</p> <p>Version: 0.6.7</p> <p>Docs: https://asynq-io.github.io/sqlargon/</p> <p>Repository: https://github.com/asynq-io/sqlargon</p>"},{"location":"#about","title":"About","text":"<p>This library provides glue code to use sqlalchemy async sessions, core queries and orm models from one object which provides somewhat of repository pattern. This solution has few advantages:</p> <ul> <li>no need to pass <code>session</code> object to every function/method. It is stored (and optionally injected) in repository object</li> <li>write data access queries in one place</li> <li>no need to import <code>insert</code>,<code>update</code>, <code>delete</code>, <code>select</code> from sqlalchemy over and over again</li> <li>Implicit cast of results to <code>.scalars().all()</code> or <code>.one()</code></li> <li>Your view model (e.g. FastAPI routes) does not need to know about the underlying storage. Repository class can be replaced at any moment any object providing similar interface.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p><pre><code>pip install sqlargon\n</code></pre> or</p> <pre><code>poetry add sqlargon\n</code></pre>"},{"location":"migrations/","title":"Alembic Migrations","text":""},{"location":"migrations/#alembic-setup","title":"Alembic setup","text":"<p>Example script how to configure alembic without installing <code>psycopg2</code> or any other synchronous driver.</p> <pre><code>import asyncio\nimport os\nfrom logging.config import fileConfig\n\nfrom alembic import context\n# TODO: replace 2 lines below\nfrom myapp.db import db  # noqa: F401\nimport myapp.models  # noqa: F401\n\n# optionally use your settings object\nurl = os.getenv(\"SQLALCHEMY_DATABASE_URL\")\n\nconfig = context.config\n\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n\n\n\ndef run_migrations_offline() -&gt; None:\n    context.configure(\n        url=url,\n        target_metadata=db.Model.metadata,\n        literal_binds=True,\n        dialect_opts={\"paramstyle\": \"named\"},\n    )\n\n    with context.begin_transaction():\n        context.run_migrations()\n\n\nasync def run_migrations_online():\n    def do_migrations(connection):\n        context.configure(\n            connection=connection,\n            target_metadata=db.Model.metadata,\n            dialect_opts={\"paramstyle\": \"named\"},\n        )\n\n        with context.begin_transaction():\n            context.run_migrations()\n\n    async with db.engine.connect() as connection:\n        await connection.run_sync(do_migrations)\n\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    asyncio.run(run_migrations_online())\n</code></pre>"}]}